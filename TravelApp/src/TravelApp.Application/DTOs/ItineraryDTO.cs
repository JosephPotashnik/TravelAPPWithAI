using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace TravelApp.Application.DTOs
{
    /// <summary>
    /// Data Transfer Object for Itinerary entity
    /// </summary>
    public class ItineraryDTO
    {
        /// <summary>
        /// Unique identifier for the itinerary
        /// </summary>
        public string Id { get; set; } = string.Empty;
        
        /// <summary>
        /// Reference to the user who owns this itinerary
        /// </summary>
        [Required]
        public string UserId { get; set; } = string.Empty;
        
        /// <summary>
        /// Name of the itinerary
        /// </summary>
        [Required]
        [StringLength(100, MinimumLength = 3)]
        public string Name { get; set; } = string.Empty;
        
        /// <summary>
        /// Description of the itinerary
        /// </summary>
        [StringLength(500)]
        public string Description { get; set; } = string.Empty;
        
        
        /// <summary>
        /// Start date of the itinerary
        /// </summary>
        [Required]
        public DateTime StartDate { get; set; }
        
        /// <summary>
        /// End date of the itinerary
        /// </summary>
        [Required]
        public DateTime EndDate { get; set; }
        
        /// <summary>
        /// Primary destination (city/region/country)
        /// </summary>
        [Required]
        [StringLength(100)]
        public string PrimaryDestination { get; set; } = string.Empty;
        
        /// <summary>
        /// Budget for the entire trip
        /// </summary>
        [Range(0, double.MaxValue, ErrorMessage = "Total budget cannot be negative")]
        public decimal TotalBudget { get; set; }
        
        /// <summary>
        /// List of itinerary items (activities, accommodations, etc.)
        /// </summary>
        public List<string> ItineraryItemIds { get; set; } = new List<string>();
        
        /// <summary>
        /// List of populated itinerary items (optional, used for retrieving full data)
        /// </summary>
        public List<ItineraryItemDTO>? ItineraryItems { get; set; }
        
        /// <summary>
        /// Tags for easy searching and categorization
        /// </summary>
        public List<string> Tags { get; set; } = new List<string>();
        
        /// <summary>
        /// Flag indicating if this is a draft itinerary
        /// </summary>
        public bool IsDraft { get; set; } = true;
        
        /// <summary>
        /// Flag indicating if the itinerary was generated by AI
        /// </summary>
        public bool IsAIGenerated { get; set; }
        
        /// <summary>
        /// Flag indicating if this is a template itinerary (for reuse)
        /// </summary>
        public bool IsTemplate { get; set; }
        
        /// <summary>
        /// Version number of the itinerary (for tracking changes)
        /// </summary>
        public int Version { get; set; } = 1;
        
        /// <summary>
        /// ID of the original itinerary if this is a version or copy
        /// </summary>
        public string? OriginalItineraryId { get; set; }
        
        /// <summary>
        /// Version notes about changes made in this version
        /// </summary>
        [StringLength(500)]
        public string VersionNotes { get; set; } = string.Empty;
        
        /// <summary>
        /// References to ratings/feedback received for this itinerary
        /// </summary>
        public List<string> FeedbackIds { get; set; } = new List<string>();
        
        /// <summary>
        /// Notes or special requirements for the itinerary
        /// </summary>
        [StringLength(1000)]
        public string Notes { get; set; } = string.Empty;
        
        /// <summary>
        /// Date and time when the entity was created
        /// </summary>
        public DateTime CreatedAt { get; set; }
        
        /// <summary>
        /// Date and time when the entity was last updated
        /// </summary>
        public DateTime UpdatedAt { get; set; }
        
        /// <summary>
        /// Gets the duration of the itinerary in days
        /// </summary>
        /// <returns>Number of days</returns>
        public int GetDurationInDays()
        {
            return (EndDate - StartDate).Days + 1;
        }
    }
}