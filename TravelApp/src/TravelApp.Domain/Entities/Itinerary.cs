using System;
using System.Collections.Generic;
using System.Linq;
using TravelApp.Domain.Common;

namespace TravelApp.Domain.Entities
{
    /// <summary>
    /// Itinerary entity representing a complete travel plan
    /// </summary>
    public class Itinerary : Entity
    {
        /// <summary>
        /// Reference to the user who owns this itinerary
        /// </summary>
        public string UserId { get; set; } = string.Empty;

        /// <summary>
        /// Name of the itinerary
        /// </summary>
        public string Name { get; set; } = string.Empty;

        /// <summary>
        /// Description of the itinerary
        /// </summary>
        public string Description { get; set; } = string.Empty;

        /// <summary>
        /// Start date of the itinerary
        /// </summary>
        public DateTime StartDate { get; set; }

        /// <summary>
        /// End date of the itinerary
        /// </summary>
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Primary destination (city/region/country)
        /// </summary>
        public string PrimaryDestination { get; set; } = string.Empty;

        /// <summary>
        /// Budget for the entire trip
        /// </summary>
        public decimal TotalBudget { get; set; }

        /// <summary>
        /// List of itinerary items (activities, accommodations, etc.)
        /// </summary>
        public List<string> ItineraryItemIds { get; set; } = new List<string>();

        /// <summary>
        /// Tags for easy searching and categorization
        /// </summary>
        public List<string> Tags { get; set; } = new List<string>();

        /// <summary>
        /// Flag indicating if this is a draft itinerary
        /// </summary>
        public bool IsDraft { get; set; } = true;

        /// <summary>
        /// Flag indicating if the itinerary was generated by AI
        /// </summary>
        public bool IsAIGenerated { get; set; }

        /// <summary>
        /// Flag indicating if this is a template itinerary (for reuse)
        /// </summary>
        public bool IsTemplate { get; set; }

        /// <summary>
        /// Version number of the itinerary (for tracking changes)
        /// </summary>
        public int Version { get; set; } = 1;

        /// <summary>
        /// ID of the original itinerary if this is a version or copy
        /// </summary>
        public string? OriginalItineraryId { get; set; }

        /// <summary>
        /// Version notes about changes made in this version
        /// </summary>
        public string VersionNotes { get; set; } = string.Empty;

        /// <summary>
        /// References to ratings/feedback received for this itinerary
        /// </summary>
        public List<string> FeedbackIds { get; set; } = new List<string>();

        /// <summary>
        /// Notes or special requirements for the itinerary
        /// </summary>
        public string Notes { get; set; } = string.Empty;

        /// <summary>
        /// Validates the itinerary entity
        /// </summary>
        /// <exception cref="ArgumentException">Thrown when validation fails</exception>
        public void Validate()
        {
            if (string.IsNullOrWhiteSpace(UserId))
                throw new ArgumentException("User ID cannot be empty", nameof(UserId));

            if (string.IsNullOrWhiteSpace(Name))
                throw new ArgumentException("Itinerary name cannot be empty", nameof(Name));

            if (EndDate < StartDate)
                throw new ArgumentException("End date cannot be before start date", nameof(EndDate));

            if (string.IsNullOrWhiteSpace(PrimaryDestination))
                throw new ArgumentException("Primary destination cannot be empty", nameof(PrimaryDestination));

            if (TotalBudget < 0)
                throw new ArgumentException("Total budget cannot be negative", nameof(TotalBudget));
        }

        /// <summary>
        /// Gets the duration of the itinerary in days
        /// </summary>
        /// <returns>Number of days</returns>
        public int GetDurationInDays()
        {
            return (EndDate - StartDate).Days + 1;
        }

        /// <summary>
        /// Creates a new version of the itinerary
        /// </summary>
        /// <param name="versionNotes">Notes explaining the changes in this version</param>
        /// <returns>New itinerary instance based on this one</returns>
        public Itinerary CreateNewVersion(string versionNotes)
        {
            if (string.IsNullOrEmpty(Id))
                throw new InvalidOperationException("Cannot create a new version of an unsaved itinerary");

            var newVersion = new Itinerary
            {
                UserId = UserId,
                Name = Name,
                Description = Description,
                StartDate = StartDate,
                EndDate = EndDate,
                PrimaryDestination = PrimaryDestination,
                TotalBudget = TotalBudget,
                ItineraryItemIds = new List<string>(ItineraryItemIds),
                Tags = new List<string>(Tags),
                IsDraft = true, // New version always starts as draft
                IsAIGenerated = IsAIGenerated,
                IsTemplate = IsTemplate,
                Version = Version + 1,
                OriginalItineraryId = OriginalItineraryId ?? Id,
                VersionNotes = versionNotes,
                Notes = Notes
            };

            return newVersion;
        }

        /// <summary>
        /// Creates a template from this itinerary
        /// </summary>
        /// <returns>New itinerary instance that is marked as a template</returns>
        public Itinerary CreateTemplateFromThis()
        {
            var template = new Itinerary
            {
                UserId = UserId,
                Name = $"Template: {Name}",
                Description = Description,
                PrimaryDestination = PrimaryDestination,
                ItineraryItemIds = new List<string>(ItineraryItemIds),
                Tags = new List<string>(Tags),
                IsTemplate = true,
                IsAIGenerated = IsAIGenerated,
                OriginalItineraryId = Id,
                Notes = Notes
            };

            return template;
        }
    }
}